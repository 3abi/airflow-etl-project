#!/bin/bash

set -e

### Couleurs ###
GREEN="\033[1;32m"
RED="\033[1;31m"
NC="\033[0m" # No Color

echo -e "${GREEN}üöÄ Lancement de l'installation du projet...${NC}"

### 1. V√©rification des pr√©requis ###
check_and_install_docker() {
  if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker non install√©. Installation...${NC}"
    curl -fsSL https://get.docker.com | sh
    sudo usermod -aG docker "$USER"
    echo -e "${GREEN}‚úÖ Docker install√©. Veuillez red√©marrer votre session.${NC}"
  else
    echo -e "${GREEN}‚úÖ Docker est d√©j√† install√©.${NC}"
  fi
}

check_and_install_docker_compose() {
  if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose non install√©. Installation...${NC}"
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
      -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    echo -e "${GREEN}‚úÖ Docker Compose install√©.${NC}"
  else
    echo -e "${GREEN}‚úÖ Docker Compose est d√©j√† install√©.${NC}"
  fi
}

check_and_install_docker
check_and_install_docker_compose

### 2. Chargement de l‚Äôenvironnement ###
if [ -f .env ]; then
  export $(grep -v '^#' .env | xargs)
  echo -e "${GREEN}‚úÖ Fichier .env charg√©.${NC}"
else
  echo -e "${RED}‚ö†Ô∏è  Fichier .env manquant ! Merci d'en cr√©er un avant de continuer.${NC}"
  exit 1
fi

### 3. Cr√©ation des dossiers persistants ###
mkdir -p data/db data/limesurvey_uploads

### 4. V√©rification des fichiers critiques ###
[ -f docker-compose.yml ] || { echo -e "${RED}‚ùå docker-compose.yml manquant !${NC}"; exit 1; }
[ -f python_worker/requirements.txt ] || echo "# requirements" > python_worker/requirements.txt
[ -f python_worker/main.py ] || echo "print('Hello from worker')" > python_worker/main.py

### 5. Build & Lancement ###
echo -e "${GREEN}üì¶ Lancement de docker-compose...${NC}"
docker-compose up -d --build

### 6. V√©rification de l‚Äô√©tat des services ###
check_service() {
  local name="$1"
  local status
  status=$(docker inspect --format='{{.State.Health.Status}}' "$name" 2>/dev/null || echo "unknown")
  
  if [ "$status" == "healthy" ] || [ "$status" == "running" ]; then
    echo -e "${GREEN}‚úÖ Service $name est OK ($status)${NC}"
  else
    echo -e "${RED}‚ùå Service $name en erreur ou inconnu (status: $status)${NC}"
  fi
}

echo -e "${GREEN}üîç V√©rification de l'√©tat des conteneurs...${NC}"
services=$(docker-compose ps -q)
for id in $services; do
  name=$(docker inspect --format='{{.Name}}' "$id" | cut -c2-)
  check_service "$name"
done

echo -e "${GREEN}üéâ Installation termin√©e avec succ√®s !${NC}"





Parfait. Voici un script install.sh idempotent, professionnel et robuste, adapt√© √† ton d√©p√¥t GitLab existant. Il :

V√©rifie la pr√©sence de Docker et Docker Compose, et les installe si besoin.

V√©rifie l‚Äôexistence des fichiers essentiels (.env, docker-compose.yml, etc.)

Cr√©e les dossiers manquants.

Lance les conteneurs via docker-compose up -d --build.

V√©rifie la sant√© de chaque service.

Est idempotent : il ne refait rien inutilement.


