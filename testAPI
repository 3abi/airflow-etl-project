# ✅ Test de Non-Régression Technique — `toto`

Ce projet exécute un **test de non-régression technique** (*TNR*) pour comparer deux versions de livrables techniques — typiquement des fichiers **XML**, **CSV**, **LOG** — de façon simple et traçable.

---

## 🎯 **Objectif**

- Vérifier automatiquement :
  - L’existence des fichiers dans les deux versions
  - La cohérence des tailles de fichiers
  - Le contenu **texte trié** ligne par ligne (pour neutraliser l’ordre)
- Fournir :
  - Un **rapport `.txt`** détaillé et structuré
  - Des comparaisons visuelles **WinMerge**
  - Un diff **texte brut** via `fc` (ou `difflib` Python en secours)

---

## 📂 **Structure recommandée**


projet/
├── scripts/
│ └── toto.py # Ton script principal
├── utils/
│ └── WinMergeU.exe # Version portable de WinMerge
├── INPUT/
│ ├── Resultats_95_V1/ # Exemple Version 1
│ └── Resultats_95_V2/ # Exemple Version 2
├── TNR_RESULTS/ # Rapport généré + fichiers triés
└── README.md # Ce fichier


---

## ⚙️ **Prérequis**

- Python 3.x installé.
- `WinMergeU.exe` (version portable) placé dans `utils/`.
- Pour `fc` :
  - Disponible nativement sous **Windows** (`fc.exe`).
- Pas besoin d’autre module externe (tout est Python standard).

---

## ✅ **Fonctionnement**

1️⃣ Le script trie chaque fichier cible ligne par ligne pour neutraliser l’ordre (utile pour CSV/LOG/XML si l’ordre n’est pas significatif).  
2️⃣ Il compare chaque paire (`v1` ↔ `v2`) :
   - **Visuellement** avec **WinMerge** (ouvre la fenêtre GUI).
   - **Automatiquement** en ligne de commande avec `fc` :
     - Diff brute intégrée dans le rapport `.txt`.
     - Si `fc` n’est pas dispo, `difflib` Python prend le relais.
3️⃣ Il génère :
   - Un rapport texte `TNR_RESULTS/report_global.txt` détaillant tout.
   - Des copies triées dans `TNR_RESULTS/SORTED_FILES`.

---

## 🗂️ **Extensions traitées**

Par défaut :

.xml, .csv, .log


Ces extensions sont comparées **sans sensibilité à la casse**.

---

## 🚀 **Lancer le test**

Dans ton terminal (PowerShell ou `cmd.exe`) :

```bash
python scripts/toto.py --version1 "INPUT/Resultats_95_V1" --version2 "INPUT/Resultats_95_V2"



Crée un run_tnr.bat :

@echo off
echo Lancement du TNR...
python scripts\toto.py --version1 "INPUT/Resultats_95_V1" --version2 "INPUT/Resultats_95_V2"
pause





Je fais suite au mail de DDD (ci-dessous). J’ai essayé de reproduire ces écarts de notre côté pour les sections impactées, et après vérification des fichiers XML j’ai trouvé que ces données sont manquantes dans les deux versions V1 et V2. J’ai vérifié aussi les données d’entrées dans « INPUT/ », ces données n’existent pas dans les fichiers d’entrées. Je trouve que c’est la raison pour laquelle ces données ne sont pas présentes dans les résultats de V1 et V2.

Je suppose qu’on n’a pas le dernier update de données d’entrées pour 34.

 Actions :
Récupération de nouvelles données 34 pour reproduire ces écarts de notre côté.
