# ✅ Test de Non-Régression Technique — `toto`

Ce projet exécute un **test de non-régression technique** (*TNR*) pour comparer deux versions de livrables techniques — typiquement des fichiers **XML**, **CSV**, **LOG** — de façon simple et traçable.

---

## 🎯 **Objectif**

- Vérifier automatiquement :
  - L’existence des fichiers dans les deux versions
  - La cohérence des tailles de fichiers
  - Le contenu **texte trié** ligne par ligne (pour neutraliser l’ordre)
- Fournir :  
  - Un **rapport `.txt`** détaillé et structuré
  - Des comparaisons visuelles **WinMerge**
  - Un diff **texte brut** via `fc` (ou `difflib` Python en secours)

---

## 📂 **Structure recommandée**


projet/
├── scripts/
│ └── toto.py # Ton script principal
├── utils/
│ └── WinMergeU.exe # Version portable de WinMerge
├── INPUT/
│ ├── Resultats_95_V1/ # Exemple Version 1
│ └── Resultats_95_V2/ # Exemple Version 2
├── TNR_RESULTS/ # Rapport généré + fichiers triés
└── README.md # Ce fichier


---

## ⚙️ **Prérequis**

- Python 3.x installé.
- `WinMergeU.exe` (version portable) placé dans `utils/`.
- Pour `fc` :
  - Disponible nativement sous **Windows** (`fc.exe`).
- Pas besoin d’autre module externe (tout est Python standard).

---

## ✅ **Fonctionnement**

1️⃣ Le script trie chaque fichier cible ligne par ligne pour neutraliser l’ordre (utile pour CSV/LOG/XML si l’ordre n’est pas significatif).  
2️⃣ Il compare chaque paire (`v1` ↔ `v2`) :
   - **Visuellement** avec **WinMerge** (ouvre la fenêtre GUI).
   - **Automatiquement** en ligne de commande avec `fc` :
     - Diff brute intégrée dans le rapport `.txt`.
     - Si `fc` n’est pas dispo, `difflib` Python prend le relais.
3️⃣ Il génère :
   - Un rapport texte `TNR_RESULTS/report_global.txt` détaillant tout.
   - Des copies triées dans `TNR_RESULTS/SORTED_FILES`.

---

## 🗂️ **Extensions traitées**

Par défaut :

.xml, .csv, .log


Ces extensions sont comparées **sans sensibilité à la casse**.

---

## 🚀 **Lancer le test**

Dans ton terminal (PowerShell ou `cmd.exe`) :

```bash
python scripts/toto.py --version1 "INPUT/Resultats_95_V1" --version2 "INPUT/Resultats_95_V2"



Crée un run_tnr.bat :

@echo off
echo Lancement du TNR...
python scripts\toto.py --version1 "INPUT/Resultats_95_V1" --version2 "INPUT/Resultats_95_V2"
pause




Objet : Données manquantes – Vérification TNR et prochaines étapes

Bonjour,

Suite à votre retour concernant les lignes manquantes, nous avons mené plusieurs vérifications pour comprendre l’origine de ces écarts.

Dans un premier temps, nous avons tenté de reproduire ces écarts sur les sections concernées. Nous avons réalisé le test TNR de notre côté : celui-ci s’est avéré conforme et n’a mis en évidence aucune anomalie technique lors de l’exécution des traitements.

Nous avons ensuite vérifié le contenu des fichiers XML générés pour les versions V1 et V2 : les lignes signalées comme manquantes n’y figurent pas, et il n’y a aucun écart entre les fichiers produits pour V1 et V2.

Enfin, nous avons contrôlé les fichiers d’entrée disponibles dans le dossier « INPUT/ » : les données manquantes ne s’y trouvent pas non plus. Cela confirme que ces informations n’ont pas pu être intégrées lors du traitement, faute de disponibilité dans les données d’entrée.

Nous en concluons donc que nous ne disposons probablement pas de la dernière mise à jour des données pour le lot 34.

Prochaine étape :
Afin de poursuivre notre analyse et résoudre ces écarts, nous vous proposons de nous transmettre la version la plus récente des données d’entrée pour le lot 34. Dès réception, nous relancerons les traitements et reviendrons vers vous avec les résultats mis à jour.

Nous restons à votre disposition pour toute précision complémentaire.

Bien cordialement,
[Votre Nom]
[Votre Société]



Inspiré des problématiques de data engineering liées au développement de stratégies d’interopérabilité entre des socles Data de technologies hétérogènes, le projet XXXX vise à faciliter l’exploration combinatoire en temps réel des données stockées dans des systèmes différents de gestion de bases de données, en s’appuyant sur l’ingénierie orientée LLM grâce à un orchestrateur de prompt spécialisé. Plus précisément, le projet XXX entend fournir un dispositif conversationnel spécialisé sur l’extraction duale d’enregistrements (ou données) de bases données de technologies hétérogènes sous licence libre et basé sur des modèles LLM de fondation ouverts. Il fournit des services et outils : 

Sachant se connecter, détecter la nature technologique d’un SGBD et comprendre la structure de son modèle physique d’hébergement des données  

Sachant aligner sémantiquement un prompt spécialisé en langage naturel et les métadonnées et champs de la structure du modèle physique du SGBD 

Capable de générer la requête technique de données non seulement compatible du sens déduit du prompt spécialisé, mais aussi du formalisme de langage de requête sous-jacent à la technologie du SGBD 

Exposant une interface de restitution des données  






