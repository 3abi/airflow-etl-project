import os
import subprocess

# ========================
# === MESSAGE EXPLICATIF ===
# ========================

print("\n=== TEST DE NON-REGRESSION TECHNIQUE ===")
print("[INFO] Ce test compare deux versions de fichiers (.xml, .csv, .log)")
print("[INFO] Vérifie existence, taille et contenu trié ligne par ligne")
print("[ATTENTION] Ce test est uniquement TECHNIQUE")
print("[ATTENTION] Il ne remplace PAS une validation FONCTIONNELLE ou METIER")
print("[ATTENTION] Une vérification manuelle reste indispensable\n")

# === CONFIG ===
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print(f"[INFO] ROOT_DIR : {ROOT_DIR}")

INPUT_VERSION_1 = "INPUT/Resultats_95_V1"
INPUT_VERSION_2 = "INPUT/Resultats_95_V2"
TNR_TOOLKIT = os.path.join(ROOT_DIR, "utils")

DIR1 = os.path.join(ROOT_DIR, INPUT_VERSION_1)
DIR2 = os.path.join(ROOT_DIR, INPUT_VERSION_2)
OUTPUT_DIR = os.path.join(ROOT_DIR, "TNR_RESULTS")
SORTED_DIR = os.path.join(OUTPUT_DIR, "SORTED_FILES")
REPORT_FILE = os.path.join(OUTPUT_DIR, "report_global.txt")
WINMERGE_EXE = os.path.join(TNR_TOOLKIT, "WinMergeU.exe")

os.makedirs(DIR1, exist_ok=True)
os.makedirs(DIR2, exist_ok=True)
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs(SORTED_DIR, exist_ok=True)
os.makedirs(TNR_TOOLKIT, exist_ok=True)

EXTENSIONS = [".xml", ".csv", ".log"]

if not os.path.exists(WINMERGE_EXE):
    raise FileNotFoundError(f"[ERREUR] WinMergeU.exe introuvable : {WINMERGE_EXE}")

# === UTILS ===
def list_all_files(base_dir):
    file_paths = []
    for root, _, files in os.walk(base_dir):
        for f in files:
            f_clean = f.lower()
            if any(f_clean.endswith(ext) for ext in EXTENSIONS):
                relative_path = os.path.relpath(os.path.join(root, f), base_dir)
                file_paths.append(relative_path)
    return sorted(file_paths)

def get_file_size(path):
    return os.path.getsize(path) if os.path.exists(path) else 0

def sort_file(input_file, output_file):
    """Trie les lignes d'un fichier en UTF-8."""
    with open(input_file, 'r', encoding='utf-8', errors='ignore') as f:
        lines = f.readlines()
    with open(output_file, 'w', encoding='utf-8') as f:
        for line in sorted(lines):
            f.write(line)

def run_winmerge(file1, file2):
    """Lance WinMerge en ligne de commande."""
    subprocess.run([WINMERGE_EXE, file1, file2])

# === TNR ===
with open(REPORT_FILE, 'w', encoding='utf-8') as report:

    files1 = set(list_all_files(DIR1))
    files2 = set(list_all_files(DIR2))
    all_files = sorted(files1 | files2)

    report.write("=== TEST DE NON-REGRESSION TECHNIQUE ===\n")
    report.write(
        "Ce rapport vérifie uniquement :\n"
        "- L'existence des fichiers dans les deux versions\n"
        "- Les tailles\n"
        "- Le contenu texte trié ligne par ligne\n"
        "\n"
        "ATTENTION : Test purement TECHNIQUE.\n"
        "Il ne remplace pas une validation fonctionnelle ou métier.\n"
        "Une vérification manuelle reste indispensable.\n\n"
    )

    report.write("=== BILAN STATISTIQUE ===\n")
    for rel_path in all_files:
        f1 = os.path.join(DIR1, rel_path)
        f2 = os.path.join(DIR2, rel_path)
        exists1 = os.path.exists(f1)
        exists2 = os.path.exists(f2)
        size1 = get_file_size(f1)
        size2 = get_file_size(f2)
        report.write(f"{rel_path} | Exists V1: {exists1} | Exists V2: {exists2} | Size V1: {size1} | Size V2: {size2}\n")
    report.write("\n")

    report.write("=== BILAN DETAILLE METHODE 2 ===\n")
    for rel_path in all_files:
        ext = os.path.splitext(rel_path)[1].lower()
        if not any(rel_path.endswith(ext) for ext in EXTENSIONS):
            continue

        f1 = os.path.join(DIR1, rel_path)
        f2 = os.path.join(DIR2, rel_path)

        if os.path.exists(f1) and os.path.exists(f2):
            sorted1 = os.path.join(SORTED_DIR, rel_path.replace(os.sep, "_") + "_v1_sorted.txt")
            sorted2 = os.path.join(SORTED_DIR, rel_path.replace(os.sep, "_") + "_v2_sorted.txt")
            os.makedirs(os.path.dirname(sorted1), exist_ok=True)

            sort_file(f1, sorted1)
            sort_file(f2, sorted2)

            report.write(f"Comparaison générique de : {rel_path}\n")
            run_winmerge(sorted1, sorted2)
            report.write(f" => WinMerge appelé sur fichiers triés.\n")
    report.write("\n")

print(f"\n✅ TNR terminé. Rapport : {REPORT_FILE}")
