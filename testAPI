<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Exploration compl√®te API Boursi√®res</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      padding: 20px;
    }
    input, button {
      padding: 8px;
      font-size: 16px;
    }
    .section {
      background: #fff;
      margin: 20px 0;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    h1, h2 {
      color: #333;
    }
    pre {
      background: #f0f0f0;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
    }
    canvas {
      background: #fff;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
      margin: 20px 0;
    }
    .toggle-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      margin-bottom: 10px;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>Exploration compl√®te des APIs Marketstack & Yahoo Finance</h1>
  <label for="symbol">Symbole boursier :</label>
  <input type="text" id="symbol" placeholder="Ex : AAPL">
  <button onclick="getAllStockData()">Obtenir les donn√©es</button>

  <canvas id="priceChart" width="800" height="400"></canvas>
  <canvas id="intradayChart" width="800" height="400"></canvas>
  <div id="results"></div>

  <script>
    const yahooFinanceApiKey = 'VOTRE_CLE_YAHOO';
    const marketstackApiKey = 'VOTRE_CLE_MARKETSTACK';

    async function fetchYahooFinanceData(symbol) {
      const modules = [
        "price","summaryDetail","financialData","defaultKeyStatistics",
        "calendarEvents","earnings","esgScores","assetProfile",
        "recommendationTrend","upgradeDowngradeHistory","insiderHolders",
        "insiderTransactions","majorHoldersBreakdown","incomeStatementHistory",
        "balanceSheetHistory","cashflowStatementHistory","netSharePurchaseActivity",
        "sectorTrend","quoteType"
      ].join(',');

      const url = `https://yfapi.net/v11/finance/quoteSummary/${symbol}?modules=${modules}`;

      const response = await fetch(url, {
        headers: { 'x-api-key': yahooFinanceApiKey }
      });
      if (!response.ok) throw new Error('Erreur Yahoo Finance');

      const json = await response.json();
      return json.quoteSummary.result[0];
    }

    async function fetchMarketstackEndpoint(endpoint) {
      const url = `https://api.marketstack.com/v1${endpoint}`;
      const res = await fetch(url);
      if (!res.ok) throw new Error(`Erreur API Marketstack : ${endpoint} (Code ${res.status})`);
      return await res.json();
    }

    function displaySection(title, dataObj) {
      const section = document.createElement('div');
      section.className = 'section';
      const h2 = document.createElement('h2');
      h2.textContent = title;

      const toggleBtn = document.createElement('button');
      toggleBtn.textContent = 'Afficher/Masquer';
      toggleBtn.className = 'toggle-btn';

      const pre = document.createElement('pre');
      pre.textContent = JSON.stringify(dataObj, null, 2);

      toggleBtn.onclick = () => {
        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';
      };

      section.appendChild(h2);
      section.appendChild(toggleBtn);
      section.appendChild(pre);
      document.getElementById('results').appendChild(section);
    }

    function displayReadableTicker(data) {
      if (!data) return;
      const section = document.createElement('div');
      section.className = 'section';
      const h2 = document.createElement('h2');
      h2.textContent = 'üìå D√©tails lisibles du ticker';

      const content = document.createElement('p');
      content.innerHTML = `
        <strong>Nom de l‚Äôentreprise :</strong> ${data.name || 'N/A'}<br>
        <strong>Symbole :</strong> ${data.symbol || 'N/A'}<br>
        <strong>Exchange :</strong> ${data.stock_exchange?.name || 'N/A'} (${data.stock_exchange?.acronym || ''})<br>
        <strong>Devise :</strong> ${data.currency || 'N/A'}
      `;
      section.appendChild(h2);
      section.appendChild(content);
      document.getElementById('results').appendChild(section);
    }

    function plotPriceChart(data) {
      const sorted = data.slice().reverse();
      const labels = sorted.map(item => item.date.substring(0, 10));
      const prices = sorted.map(item => item.close);

      const ctx = document.getElementById('priceChart').getContext('2d');
      if (window.priceChartInstance) window.priceChartInstance.destroy();

      window.priceChartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Prix de cl√¥ture (Marketstack)',
            data: prices,
            borderColor: 'blue',
            borderWidth: 2,
            pointRadius: 0,
            fill: false
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { position: 'top' }
          },
          scales: {
            x: { display: true, title: { display: true, text: 'Date' } },
            y: { display: true, title: { display: true, text: 'Prix ($)' } }
          }
        }
      });
    }

    function plotIntradayChart(data) {
      if (!Array.isArray(data)) return;
      const sorted = data.slice().reverse();
      const labels = sorted.map(item => item.date.split('T')[1]?.substring(0,5));
      const prices = sorted.map(item => item.close);

      const ctx = document.getElementById('intradayChart').getContext('2d');
      if (window.intradayChartInstance) window.intradayChartInstance.destroy();

      window.intradayChartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Intraday (1min)',
            data: prices,
            borderColor: 'green',
            borderWidth: 2,
            pointRadius: 0,
            fill: false
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { position: 'top' }
          },
          scales: {
            x: { display: true, title: { display: true, text: 'Heure (UTC)' } },
            y: { display: true, title: { display: true, text: 'Prix ($)' } }
          }
        }
      });
    }

    async function getAllStockData() {
      const symbol = document.getElementById('symbol').value.trim().toUpperCase();
      if (!symbol) return alert("Veuillez saisir un symbole.");

      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '<p>Chargement...</p>';

      const endpoints = [
        { id: 'eod_latest', title: 'üìà Donn√©es EOD actuelles', path: `/eod/latest?access_key=${marketstackApiKey}&symbols=${symbol}` },
        { id: 'eod_history', title: 'üï∞Ô∏è Historique (5 ans)', path: `/eod?access_key=${marketstackApiKey}&symbols=${symbol}&limit=1200&sort=DESC` },
        { id: 'ticker', title: '‚ÑπÔ∏è Informations Ticker', path: `/tickers/${symbol}?access_key=${marketstackApiKey}` },
        { id: 'exchanges', title: 'üåç March√©s Boursiers (Exchanges)', path: `/exchanges?access_key=${marketstackApiKey}` },
        { id: 'intraday', title: '‚è±Ô∏è Intraday 1min', path: `/intraday?access_key=${marketstackApiKey}&symbols=${symbol}&interval=1min&limit=50` },
        { id: 'dividends', title: 'üí∞ Dividendes', path: `/dividends?access_key=${marketstackApiKey}&symbols=${symbol}` },
        { id: 'splits', title: 'üîÄ Fractionnements d‚Äôactions (Splits)', path: `/splits?access_key=${marketstackApiKey}&symbols=${symbol}` }
      ];

      try {
        const yahooData = await fetchYahooFinanceData(symbol);
        resultsDiv.innerHTML = '';

        // Donn√©es structur√©es √† partir de Yahoo
        const quote = yahooData;

        const general = {
          symbole: symbol,
          nom: quote.price?.longName || "N/A",
          exchange: quote.price?.exchangeName || "N/A"
        };

        const fondamentaux = {
          prixActuel: quote.price?.regularMarketPrice?.raw || "N/A",
          devise: quote.price?.currency || "N/A",
          capitalisation: quote.price?.marketCap?.fmt || "N/A",
          tresorerieParAction: quote.financialData?.totalCashPerShare?.fmt || "N/A",
          chiffreAffaires: quote.financialData?.totalRevenue?.fmt || "N/A",
          valeurComptable: quote.defaultKeyStatistics?.bookValue?.fmt || "N/A"
        };

        const ratios = {
          PER: quote.summaryDetail?.trailingPE?.fmt || "N/A",
          PCF: quote.defaultKeyStatistics?.priceToCashFlow?.fmt || "N/A",
          PSR: quote.summaryDetail?.priceToSalesTrailing12Months?.fmt || "N/A",
          PBR: quote.defaultKeyStatistics?.priceToBook?.fmt || "N/A"
        };

        displaySection('üìä Donn√©es G√©n√©rales - Yahoo', general);
        displaySection('üìä Donn√©es Fondamentales - Yahoo', fondamentaux);
        displaySection('üìä Ratios Financiers - Yahoo', ratios);

        for (const [key, value] of Object.entries(yahooData)) {
          displaySection(`‚ú® Module Yahoo : ${key}`, value);
        }

        for (const endpoint of endpoints) {
          try {
            const data = await fetchMarketstackEndpoint(endpoint.path);
            displaySection(`‚úÖ Marketstack - ${endpoint.title}`, data.data || data);
            if (endpoint.id === 'eod_history') {
              plotPriceChart(data.data || data);
            }
            if (endpoint.id === 'intraday') {
              plotIntradayChart(data.data || data);
            }
            if (endpoint.id === 'ticker') {
              displayReadableTicker(data.data);
            }
          } catch (e) {
            displaySection(`‚ùå Marketstack - ${endpoint.title}`, { erreur: e.message });
          }
        }
      } catch (error) {
        console.error(error);
        resultsDiv.innerHTML = '<p style="color:red">Erreur globale lors de la r√©cup√©ration des donn√©es. Consultez la console.</p>';
      }
    }
  </script>
</body>
</html>
