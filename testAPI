.
├── docker/
│   └── dev.Dockerfile        # Image de développement Python
├── docker-compose.yml        # Orchestration des services
├── Makefile                  # Aide pour les commandes de développement
├── python_project/
│   ├── src/                  # Code source Python (modules, fonctions, classes)
│   │   ├── __init__.py
│   │   └── module1.py
│   ├── main.py               # Point d’entrée pour exécuter localement
│   ├── tests/                # Tests unitaires automatisés
│   │   ├── __init__.py
│   │   └── test_module1.py
│   ├── requirements.txt      # Liste des dépendances Python
│   ├── .env.example          # Variables d’environnement (sans secrets)
│   ├── .pre-commit-config.yaml  # Configuration des hooks git
│   └── README.md             # Documentation du projet





# docker/dev.Dockerfile
FROM python:3.11-slim

# Crée un utilisateur non-root
RUN useradd -ms /bin/bash devuser

# Répertoire de travail
WORKDIR /app

# Copie les fichiers (le code sera aussi monté via volume dans docker-compose)
COPY python_project/ /app

# Installation des dépendances Python
RUN pip install --no-cache-dir -r requirements.txt

# Passe en tant qu'utilisateur non-root
USER devuser

# Maintient le conteneur actif (mode dev)
CMD ["tail", "-f", "/dev/null"]




version: '3.8'

services:
  mariadb:
    image: mariadb
    ...

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ...

  limesurvey:
    image: limesurvey/limesurvey
    ...

  python-dev:
    build:
      context: .
      dockerfile: docker/dev.Dockerfile
    volumes:
      - ./python_project:/app
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - default
    depends_on:
      - mariadb






🐍 Base image : python:3.11-slim
Image légère, maintenue officiellement par Python

Moins de failles potentielles que les images "full"

Compatible avec tous les outils modernes (pip, venv, pytest, etc.)

Maintien facile de la version Python entre dev/test/stage



🔐 Utilisateur non-root dans le conteneur
Création d’un utilisateur devuser

Empêche l’accès root à l’intérieur du conteneur

Sécurité renforcée : bonne pratique DevSecOps

Évite les permissions sur les fichiers partagés avec l’hôte (notamment sur Windows)

Dockerfile
Copier
Modifier



Volumes montés pour un développement en live
Montage de ./python_project:/app dans le conteneur

Code modifiable en temps réel depuis l’IDE local

Aucun besoin de reconstruire l’image à chaque modification

Compatible avec VS Code / PyCharm + extensions Docker



 Accès direct à MariaDB via le réseau Docker
Tous les services Docker sont sur le même réseau interne

Accès à la base avec host=mariadb (pas besoin d’IP)

Pas d’exposition du port MariaDB à l’extérieur si non nécessaire

Favorise le test de bout en bout des scripts Python




 Tests, Linting, Pre-commit intégrés dans l’image
pytest pour les tests unitaires automatisés

black et ruff pour le formatage et la vérification du style

.pre-commit-config.yaml pour des hooks git (formatage auto avant chaque commit)


