import os
import subprocess
from xmldiff import main as xmldiff_main

# === CONFIG ===
DIR1 = r"C:/LOXAM/Version1"
DIR2 = r"C:/LOXAM/Version2"
OUTPUT_DIR = r"C:/LOXAM/TNR_RESULTS"
SORTED_DIR = os.path.join(OUTPUT_DIR, "sorted_files")
REPORT_FILE = os.path.join(OUTPUT_DIR, "report_global.txt")
os.makedirs(SORTED_DIR, exist_ok=True)

EXTENSIONS = [".xml", ".csv", ".log"]

# === UTILS ===
def list_all_files(base_dir):
    file_paths = []
    for root, _, files in os.walk(base_dir):
        for f in files:
            if any(f.endswith(ext) for ext in EXTENSIONS):
                relative_path = os.path.relpath(os.path.join(root, f), base_dir)
                file_paths.append(relative_path)
    return sorted(file_paths)

def get_file_size(path):
    return os.path.getsize(path) if os.path.exists(path) else 0

def sort_file(input_file, output_file):
    """Appelle Sublime Text en ligne de commande pour trier les lignes (exemple générique)."""
    # Ici on simule : utilise `sort` natif Windows à la place si besoin
    with open(input_file, 'r') as f:
        lines = f.readlines()
    with open(output_file, 'w') as f:
        for line in sorted(lines):
            f.write(line)

def run_winmerge(file1, file2):
    """Lance WinMerge en ligne de commande"""
    subprocess.run(['WinMergeU.exe', file1, file2])

# === TNR ===
with open(REPORT_FILE, 'w') as report:

    # --- Index tous les fichiers ---
    files1 = set(list_all_files(DIR1))
    files2 = set(list_all_files(DIR2))
    all_files = sorted(files1 | files2)

    # --- Bilan statistique ---
    report.write("=== BILAN STATISTIQUE ===\n")
    for rel_path in all_files:
        f1 = os.path.join(DIR1, rel_path)
        f2 = os.path.join(DIR2, rel_path)
        exists1 = os.path.exists(f1)
        exists2 = os.path.exists(f2)
        size1 = get_file_size(f1)
        size2 = get_file_size(f2)
        report.write(f"{rel_path} | Exists V1: {exists1} | Exists V2: {exists2} | Size V1: {size1} | Size V2: {size2}\n")
    report.write("\n")

    # --- Comparaison générique (Méthode 2) ---
    report.write("=== BILAN DETAILLE METHODE 2 ===\n")
    for rel_path in all_files:
        ext = os.path.splitext(rel_path)[1].lower()
        if not any(rel_path.endswith(ext) for ext in EXTENSIONS):
            continue

        f1 = os.path.join(DIR1, rel_path)
        f2 = os.path.join(DIR2, rel_path)

        if os.path.exists(f1) and os.path.exists(f2):
            sorted1 = os.path.join(SORTED_DIR, rel_path.replace(os.sep, "_") + "_v1_sorted.txt")
            sorted2 = os.path.join(SORTED_DIR, rel_path.replace(os.sep, "_") + "_v2_sorted.txt")
            os.makedirs(os.path.dirname(sorted1), exist_ok=True)

            sort_file(f1, sorted1)
            sort_file(f2, sorted2)

            # Tu peux commenter pour exécuter WinMerge manuellement ou auto :
            report.write(f"Comparaison générique de : {rel_path}\n")
            run_winmerge(sorted1, sorted2)
            report.write(f" => WinMerge called on sorted files.\n")
    report.write("\n")

    # --- Comparaison XML spécifique (Méthode 1) ---
    report.write("=== BILAN DETAILLE XML METHODE 1 ===\n")
    xml_files = [f for f in all_files if f.endswith(".xml")]
    for rel_path in xml_files:
        f1 = os.path.join(DIR1, rel_path)
        f2 = os.path.join(DIR2, rel_path)

        if os.path.exists(f1) and os.path.exists(f2):
            report.write(f"Comparaison XML : {rel_path}\n")
            try:
                diff = xmldiff_main.diff_files(f1, f2)
                if diff:
                    for d in diff:
                        report.write(f"  • {d}\n")
                else:
                    report.write("  Aucun changement détecté.\n")
            except Exception as e:
                report.write(f"  Erreur XML diff: {e}\n")

print(f"\n✅ TNR terminé. Voir {REPORT_FILE}")
