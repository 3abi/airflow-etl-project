<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Exploration compl√®te API Boursi√®res</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      padding: 20px;
    }
    input, button {
      padding: 8px;
      font-size: 16px;
    }
    .section {
      background: #fff;
      margin: 20px 0;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    h1, h2 {
      color: #333;
    }
    pre {
      background: #f0f0f0;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
    }
    canvas {
      background: #fff;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
      margin: 20px 0;
    }
    .toggle-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      margin-bottom: 10px;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>PROMETHEE {based on Yahoo Finance}</h1>
  <label for="symbol">Symbole boursier :</label>
  <input type="text" id="symbol" placeholder="Ex : AAPL">
  <button onclick="getAllStockData()">Obtenir les donn√©es</button>

  <canvas id="priceChart" width="800" height="400"></canvas>
  <div id="results"></div>

  <script>
    const yahooFinanceApiKey = '';
    const marketstackApiKey = '';

    async function fetchYahooFinanceData(symbol) {
      const modules = [
        "price","summaryDetail","financialData","defaultKeyStatistics",
        "calendarEvents","earnings","esgScores","assetProfile",
        "recommendationTrend","upgradeDowngradeHistory","insiderHolders",
        "insiderTransactions","majorHoldersBreakdown","incomeStatementHistory",
        "balanceSheetHistory","cashflowStatementHistory","netSharePurchaseActivity",
        "sectorTrend","quoteType"
      ].join(',');

      const url = `https://yfapi.net/v11/finance/quoteSummary/${symbol}?modules=${modules}`;

      const response = await fetch(url, {
        headers: { 'x-api-key': yahooFinanceApiKey }
      });
      if (!response.ok) throw new Error('Erreur Yahoo Finance');

      const json = await response.json();
      return json.quoteSummary.result[0];
    }

    async function fetchMarketstackEndpoint(endpoint) {
      const url = `https://api.marketstack.com/v1${endpoint}`;
      const res = await fetch(url);
      if (!res.ok) throw new Error(`Erreur API Marketstack : ${endpoint} (Code ${res.status})`);
      return await res.json();
    }

    function displaySection(title, dataObj) {
      const section = document.createElement('div');
      section.className = 'section';
      const h2 = document.createElement('h2');
      h2.textContent = title;

      const toggleBtn = document.createElement('button');
      toggleBtn.textContent = 'Afficher/Masquer';
      toggleBtn.className = 'toggle-btn';

      const pre = document.createElement('pre');
      pre.textContent = JSON.stringify(dataObj, null, 2);

      toggleBtn.onclick = () => {
        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';
      };

      section.appendChild(h2);
      section.appendChild(toggleBtn);
      section.appendChild(pre);
      document.getElementById('results').appendChild(section);
    }

    async function getAllStockData() {
      const symbol = document.getElementById('symbol').value.trim().toUpperCase();
      if (!symbol) return alert("Veuillez saisir un symbole.");

      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '<p>Chargement...</p>';

      try {
        const yahooData = await fetchYahooFinanceData(symbol);
        const marketstackData = await fetchMarketstackEndpoint(`/eod?access_key=${marketstackApiKey}&symbols=${symbol}&limit=1200&sort=DESC`);
        const historicalPrices = marketstackData.data.slice(0, 5).reverse();

        resultsDiv.innerHTML = '';

        const quote = yahooData;

        const general = {
          symbole: symbol,
          nom: quote.price?.longName || "N/A",
          exchange: quote.price?.exchangeName || "N/A"
        };

        const fondamentaux = {
          prixActuel: quote.price?.regularMarketPrice?.raw || "N/A",
          devise: quote.price?.currency || "N/A",
          capitalisation: quote.price?.marketCap?.fmt || "N/A",
          tresorerieParAction: quote.financialData?.totalCashPerShare?.fmt || "N/A",
          chiffreAffaires: quote.financialData?.totalRevenue?.fmt || "N/A",
          valeurComptable: quote.defaultKeyStatistics?.bookValue?.fmt || "N/A"
        };

        const ratios = {
          PER: quote.summaryDetail?.trailingPE?.fmt || "N/A",
          PCF: quote.defaultKeyStatistics?.priceToCashFlow?.fmt || "N/A",
          PSR: quote.summaryDetail?.priceToSalesTrailing12Months?.fmt || "N/A",
          PBR: quote.defaultKeyStatistics?.priceToBook?.fmt || "N/A"
        };

        displaySection('üìä Donn√©es G√©n√©rales', general);
        displaySection('üìä Donn√©es Fondamentales', fondamentaux);
        displaySection('üìä Ratios Financiers { Actuels }', ratios);

        // Calcul de justes valeurs (moyennes historiques / valeurs actuelles)
        const earnings = quote.earnings?.earningsChart?.financialsChart?.yearly || [];
        const prices = historicalPrices.map(p => p.close);
        const earningsValues = earnings.map(e => e.earnings?.raw);
        const perList = prices.map((price, i) => earningsValues[i] ? price / earningsValues[i] : null).filter(v => v);

        const perAvg = perList.length ? perList.reduce((a, b) => a + b, 0) / perList.length : null;
        const perCurrent = quote.summaryDetail?.trailingPE?.raw || null;
        const pcfCurrent = quote.defaultKeyStatistics?.priceToCashFlow?.raw || null;
        const psrCurrent = quote.summaryDetail?.priceToSalesTrailing12Months?.raw || null;
        const pbrCurrent = quote.defaultKeyStatistics?.priceToBook?.raw || null;

        const priceCurrent = quote.price?.regularMarketPrice?.raw || null;

        const fairValues = {
          PER: (perAvg && perCurrent) ? (perAvg / perCurrent) * priceCurrent : null,
          PCF: pcfCurrent ? priceCurrent : null,
          PSR: psrCurrent ? priceCurrent : null,
          PBR: pbrCurrent ? priceCurrent : null
        };

        const fairValuesList = Object.values(fairValues).filter(v => typeof v === 'number');
        const fairAvg = fairValuesList.length ? fairValuesList.reduce((a, b) => a + b, 0) / fairValuesList.length : null;

        const upside = fairAvg && priceCurrent ? ((fairAvg / priceCurrent - 1) * 100) : null;

        const couleur = upside > 0 ? 'green' : 'red';

        displaySection('üìê Juste Valeur Estim√©e - Ratios Historiques', {
          'Juste Valeur (PER)': fairValues.PER?.toFixed(2) || 'N/A',
          'Juste Valeur (PCF)': fairValues.PCF?.toFixed(2) || 'N/A',
          'Juste Valeur (PSR)': fairValues.PSR?.toFixed(2) || 'N/A',
          'Juste Valeur (PBR)': fairValues.PBR?.toFixed(2) || 'N/A',
          'Moyenne': fairAvg?.toFixed(2) || 'N/A',
          'Potentiel (%)': upside !== null ? `${upside.toFixed(2)}%` : 'N/A'
        });

        const potentiel = document.createElement('div');
        potentiel.className = 'section';
        potentiel.innerHTML = `<h2 style="color:${couleur}">üìà Potentiel estim√© : ${upside?.toFixed(2) || 'N/A'}%</h2>`;
        resultsDiv.appendChild(potentiel);

      } catch (error) {
        resultsDiv.innerHTML = '<p style="color:red">Erreur : ' + error.message + '</p>';
      }
    }
  </script>
</body>
</html>
