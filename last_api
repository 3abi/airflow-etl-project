<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Donn√©es boursi√®res compl√®tes</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f4f6f8;
      padding: 2rem;
      color: #333;
    }

    h2, h3 {
      margin-bottom: 1rem;
    }

    input, button {
      padding: 10px;
      margin-right: 0.5rem;
      margin-bottom: 1rem;
      border-radius: 5px;
      border: 1px solid #ccc;
      font-size: 1rem;
    }

    button {
      background-color: #007BFF;
      color: #fff;
      cursor: pointer;
    }

    button:hover {
      background-color: #0056b3;
    }

    #output {
      margin-top: 2rem;
      background: #fff;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    canvas {
      display: none;
      margin-top: 2rem;
    }

    .error {
      color: red;
      font-weight: bold;
    }

    ul {
      list-style: none;
      padding-left: 0;
      margin-top: 1rem;
    }

    li {
      padding: 5px 0;
      border-bottom: 1px solid #eee;
    }

    .profile-block {
      margin-bottom: 1.5rem;
      overflow-wrap: break-word;
    }

    .loading {
      color: #777;
      font-style: italic;
    }

    .hidden {
      display: none;
    }
  </style>
</head>
<body>
  <h2>Donn√©es boursi√®res compl√®tes</h2>
  <input type="text" id="symbolInput" placeholder="Ex: AAPL, MSFT, AIR.PA">
  <input type="date" id="startDate">
  <input type="date" id="endDate">
  <button id="getDataBtn">Afficher</button>
  <button id="downloadBtn" class="hidden">üìÅ Export CSV</button>

  <div id="output">
    <p id="status" class="loading hidden">Chargement en cours...</p>
    <section id="profile"></section>
    <canvas id="chart" width="600" height="300"></canvas>
    <ul id="historyList"></ul>
  </div>

  <script>
    const apiKey = "TA_CLE_API"; // Remplacer par ta cl√© API Marketstack

    let chartInstance;
    let historyData = [];

    const symbolInput = document.getElementById("symbolInput");
    const startDateInput = document.getElementById("startDate");
    const endDateInput = document.getElementById("endDate");
    const status = document.getElementById("status");
    const profileBlock = document.getElementById("profile");
    const chartCanvas = document.getElementById("chart");
    const historyList = document.getElementById("historyList");
    const downloadBtn = document.getElementById("downloadBtn");

    document.getElementById("getDataBtn").addEventListener("click", getAllStockData);
    downloadBtn.addEventListener("click", exportCSV);
    symbolInput.focus();

    async function getAllStockData() {
      const symbol = symbolInput.value.trim().toUpperCase();
      const start = startDateInput.value;
      const end = endDateInput.value;

      resetDisplay();

      if (!symbol) {
        showError("Veuillez entrer un symbole valide.");
        return;
      }

      showLoading();

      try {
        const latestUrl = `https://api.marketstack.com/v1/eod/latest?access_key=${apiKey}&symbols=${symbol}`;
        const profileUrl = `https://api.marketstack.com/v1/tickers/${symbol}?access_key=${apiKey}`;
        const historyUrl = new URL("https://api.marketstack.com/v1/eod");
        historyUrl.searchParams.set("access_key", apiKey);
        historyUrl.searchParams.set("symbols", symbol);
        if (start) historyUrl.searchParams.set("date_from", start);
        if (end) historyUrl.searchParams.set("date_to", end);
        historyUrl.searchParams.set("limit", 100);

        const [latestRes, profileRes, historyRes] = await Promise.all([
          fetch(latestUrl),
          fetch(profileUrl),
          fetch(historyUrl.toString())
        ]);

        if (!latestRes.ok || !profileRes.ok || !historyRes.ok) {
          throw new Error("Une des requ√™tes a √©chou√©.");
        }

        const [latestData, profileData, historyRaw] = await Promise.all([
          latestRes.json(),
          profileRes.json(),
          historyRes.json()
        ]);

        const latest = latestData?.data?.[0];
        const profile = profileData?.data;
        historyData = historyRaw?.data?.reverse() || [];

        if (!latest || !profile || historyData.length === 0) {
          showError("Donn√©es incompl√®tes ou symbole introuvable.");
          return;
        }

        renderProfile(profile, latest);
        renderHistoryList(historyData);
        renderChart(
          historyData.map(d => new Date(d.date).toLocaleDateString()),
          historyData.map(d => d.close),
          symbol
        );

        chartCanvas.style.display = 'block';
        downloadBtn.classList.remove("hidden");
        status.classList.add("hidden");

      } catch (err) {
        console.error(err);
        showError("Erreur lors de la r√©cup√©ration des donn√©es.");
      }
    }

    function resetDisplay() {
      profileBlock.innerHTML = '';
      historyList.innerHTML = '';
      chartCanvas.style.display = 'none';
      downloadBtn.classList.add("hidden");
      status.classList.add("hidden");
    }

    function showError(message) {
      status.classList.remove("hidden");
      status.classList.remove("loading");
      status.classList.add("error");
      status.textContent = message;
    }

    function showLoading() {
      status.classList.remove("hidden");
      status.classList.remove("error");
      status.classList.add("loading");
      status.textContent = "Chargement en cours...";
    }

    function renderProfile(profile, latest) {
      profileBlock.innerHTML = `
        <article class="profile-block">
          <h3>${profile.name} (${profile.symbol})</h3>
          <p><strong>Bourse :</strong> ${profile.stock_exchange.name} (${profile.stock_exchange.acronym})</p>
          <p><strong>Pays :</strong> ${profile.stock_exchange.country}</p>
          <p><strong>Date r√©cente :</strong> ${new Date(latest.date).toLocaleDateString()}</p>
          <p><strong>Cl√¥ture :</strong> ${latest.close} USD</p>
          <p><strong>Ouverture :</strong> ${latest.open} USD</p>
          <p><strong>+ Haut :</strong> ${latest.high} USD | <strong>+ Bas :</strong> ${latest.low} USD</p>
          ${latest.volume ? `<p><strong>Volume :</strong> ${latest.volume.toLocaleString()} actions</p>` : ""}
        </article>
      `;
    }

    function renderHistoryList(data) {
      historyList.innerHTML = data.map(d => `
        <li><strong>${new Date(d.date).toLocaleDateString()}</strong> : ${d.close} USD</li>
      `).join('');
    }

    function renderChart(labels, data, symbol) {
      const ctx = chartCanvas.getContext("2d");
      if (chartInstance) chartInstance.destroy();

      chartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          labels,
          datasets: [{
            label: `Cours de cl√¥ture - ${symbol}`,
            data,
            borderColor: '#007BFF',
            fill: false,
            tension: 0.25
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { position: 'top' }
          },
          scales: {
            x: { title: { display: true, text: "Date" }},
            y: { title: { display: true, text: "Prix (USD)" }}
          }
        }
      });
    }

    function exportCSV() {
      if (historyData.length === 0) return;
      const csv = "Date,Cl√¥ture (USD)\n" + historyData.map(d =>
        `${new Date(d.date).toLocaleDateString()},${d.close}`
      ).join("\n");

      const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.setAttribute("download", "donnees_boursieres.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  </script>
</body>
</html>
