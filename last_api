<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Exploration API Boursi√®re - Nom ou Symbole</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      padding: 20px;
    }
    input, button {
      padding: 8px;
      font-size: 16px;
      margin: 5px 0;
    }
    .section {
      background: #fff;
      margin: 20px 0;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    h1, h2 {
      color: #333;
    }
    pre {
      background: #f0f0f0;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
    }
    canvas {
      background: #fff;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
      margin: 20px 0;
    }
    .toggle-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      margin-bottom: 10px;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>PROMETHEE - Analyse Financi√®re</h1>
  <label for="symbol">Symbole boursier :</label><br>
  <input type="text" id="symbol" placeholder="Ex : AAPL"><br>
  <label for="companyName">Ou nom de l'entreprise :</label><br>
  <input type="text" id="companyName" placeholder="Ex : Apple"><br>
  <button onclick="getAllStockData()">Obtenir les donn√©es</button>

  <canvas id="priceChart" width="800" height="400"></canvas>
  <div id="results"></div>

  <script>
    const yahooFinanceApiKey = 'rttxsajf3H5LODaejekoq1EVeAOxwQG98tdRyDZb';

    async function resolveSymbol(symbolInput, companyNameInput) {
      const symbol = symbolInput.trim().toUpperCase();
      const name = companyNameInput.trim();

      if (symbol) return symbol;

      if (name) {
        const url = `https://yfapi.net/v6/finance/autocomplete?query=${encodeURIComponent(name)}&lang=fr`;

        const res = await fetch(url, {
          headers: { 'x-api-key': yahooFinanceApiKey }
        });

        const data = await res.json();
        const match = data?.ResultSet?.Result?.[0];

        if (match?.symbol) return match.symbol;
        else throw new Error("Aucun symbole trouv√© pour ce nom d'entreprise.");
      }

      throw new Error("Veuillez saisir un symbole ou un nom d'entreprise.");
    }

    async function fetchYahooFinanceData(symbol) {
      const modules = [
        "price","summaryDetail","financialData","defaultKeyStatistics",
        "calendarEvents","earnings","quoteType"
      ].join(',');

      const url = `https://yfapi.net/v11/finance/quoteSummary/${symbol}?modules=${modules}`;
      const response = await fetch(url, {
        headers: { 'x-api-key': yahooFinanceApiKey }
      });
      const json = await response.json();
      if (!json.quoteSummary?.result || !json.quoteSummary.result[0]) {
        throw new Error(`Symbole invalide ou donn√©es manquantes pour ${symbol}`);
      }
      return json.quoteSummary.result[0];
    }

    async function fetchYahooHistoricalPrices(symbol) {
      const url = `https://yfapi.net/v8/finance/chart/${symbol}?range=5y&interval=1mo&region=US`;
      const response = await fetch(url, {
        headers: { 'x-api-key': yahooFinanceApiKey }
      });
      const json = await response.json();
      const timestamps = json.chart?.result?.[0]?.timestamp;
      const prices = json.chart?.result?.[0]?.indicators?.adjclose?.[0]?.adjclose;
      if (!timestamps || !prices) throw new Error("Donn√©es historiques non disponibles.");

      return timestamps.map((ts, i) => ({
        date: new Date(ts * 1000).toISOString().split('T')[0],
        close: prices[i]
      })).filter(p => p.close !== null);
    }

    function displaySection(title, dataObj) {
      const section = document.createElement('div');
      section.className = 'section';
      const h2 = document.createElement('h2');
      h2.textContent = title;

      const toggleBtn = document.createElement('button');
      toggleBtn.textContent = 'Afficher/Masquer';
      toggleBtn.className = 'toggle-btn';

      const pre = document.createElement('pre');
      pre.textContent = JSON.stringify(dataObj, null, 2);

      toggleBtn.onclick = () => {
        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';
      };

      section.appendChild(h2);
      section.appendChild(toggleBtn);
      section.appendChild(pre);
      document.getElementById('results').appendChild(section);
    }

    async function getAllStockData() {
      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '<p>Chargement...</p>';
      const ctx = document.getElementById('priceChart').getContext('2d');
      ctx.clearRect(0, 0, 800, 400);

      const symbolInput = document.getElementById('symbol').value;
      const companyNameInput = document.getElementById('companyName').value;

      try {
        const symbol = await resolveSymbol(symbolInput, companyNameInput);
        const [quote, historicalPrices] = await Promise.all([
          fetchYahooFinanceData(symbol),
          fetchYahooHistoricalPrices(symbol)
        ]);

        resultsDiv.innerHTML = '';

        const general = {
          symbole: symbol,
          nom: quote.price?.longName || "N/A",
          exchange: quote.price?.exchangeName || "N/A"
        };

        const fondamentaux = {
          prixActuel: quote.price?.regularMarketPrice?.raw || "N/A",
          devise: quote.price?.currency || "N/A",
          capitalisation: quote.price?.marketCap?.fmt || "N/A",
          tresorerieParAction: quote.financialData?.totalCashPerShare?.fmt || "N/A",
          chiffreAffaires: quote.financialData?.totalRevenue?.fmt || "N/A",
          valeurComptable: quote.defaultKeyStatistics?.bookValue?.fmt || "N/A"
        };

        const ratios = {
          PER: quote.summaryDetail?.trailingPE?.fmt || "N/A",
          PCF: quote.defaultKeyStatistics?.priceToCashFlow?.fmt || "N/A",
          PSR: quote.summaryDetail?.priceToSalesTrailing12Months?.fmt || "N/A",
          PBR: quote.defaultKeyStatistics?.priceToBook?.fmt || "N/A"
        };

        displaySection('üìä Donn√©es G√©n√©rales', general);
        displaySection('üìä Donn√©es Fondamentales', fondamentaux);
        displaySection('üìä Ratios Financiers { Actuels }', ratios);

        new Chart(ctx, {
          type: 'line',
          data: {
            labels: historicalPrices.map(p => p.date),
            datasets: [{
              label: `Prix historique (${symbol})`,
              data: historicalPrices.map(p => p.close),
              borderColor: 'blue',
              fill: false,
              tension: 0.1
            }]
          },
          options: {
            responsive: true,
            scales: {
              x: { title: { display: true, text: 'Date' }},
              y: { title: { display: true, text: 'Prix (USD)' }}
            }
          }
        });

        const earnings = quote.earnings?.earningsChart?.financialsChart?.yearly || [];
        const earningsValues = earnings.map(e => e.earnings?.raw);
        const prices = historicalPrices.slice(-earningsValues.length).map(p => p.close);
        const perList = prices.map((price, i) => earningsValues[i] ? price / earningsValues[i] : null).filter(v => v);
        const pbrList = prices.map((price, i) => earningsValues[i] ? price / earningsValues[i] : null).filter(v => v);

        const perAvg = perList.length ? perList.reduce((a, b) => a + b, 0) / perList.length : null;
        const pbrAvg = pbrList.length ? pbrList.reduce((a, b) => a + b, 0) / pbrList.length : null;

        const perCurrent = quote.summaryDetail?.trailingPE?.raw || null;
        const pcfCurrent = quote.defaultKeyStatistics?.priceToCashFlow?.raw || null;
        const psrCurrent = quote.summaryDetail?.priceToSalesTrailing12Months?.raw || null;
        const pbrCurrent = quote.defaultKeyStatistics?.priceToBook?.raw || null;
        const priceCurrent = quote.price?.regularMarketPrice?.raw || null;

        const fairValues = {
          PER: (perAvg && perCurrent) ? (perAvg / perCurrent) * priceCurrent : null,
          PCF: pcfCurrent ? priceCurrent : null,
          PSR: psrCurrent ? priceCurrent : null,
          PBR: (pbrAvg && pbrCurrent) ? (pbrAvg / pbrCurrent) * priceCurrent : null
        };

        const fairValuesList = Object.values(fairValues).filter(v => typeof v === 'number');
        const fairAvg = fairValuesList.length ? fairValuesList.reduce((a, b) => a + b, 0) / fairValuesList.length : null;
        const upside = fairAvg && priceCurrent ? ((fairAvg / priceCurrent - 1) * 100) : null;
        const couleur = upside > 0 ? 'green' : 'red';
        const formatVal = v => (typeof v === 'number' && !isNaN(v)) ? v.toFixed(2) : 'N/A';

        displaySection('üìê Juste Valeur Estim√©e - Ratios Historiques', {
          'Juste Valeur (PER)': formatVal(fairValues.PER),
          'Juste Valeur (PCF)': formatVal(fairValues.PCF),
          'Juste Valeur (PSR)': formatVal(fairValues.PSR),
          'Juste Valeur (PBR)': formatVal(fairValues.PBR),
          'Moyenne': formatVal(fairAvg),
          'Potentiel (%)': upside !== null ? `${upside.toFixed(2)}%` : 'N/A'
        });

        const potentiel = document.createElement('div');
        potentiel.className = 'section';
        potentiel.innerHTML = `<h2 style="color:${couleur}">üìà Potentiel estim√© : ${upside?.toFixed(2) || 'N/A'}%</h2>`;
        resultsDiv.appendChild(potentiel);

      } catch (error) {
        resultsDiv.innerHTML = '<p style="color:red">Erreur : ' + error.message + '</p>';
      }
    }
  </script>
</body>
</html>
