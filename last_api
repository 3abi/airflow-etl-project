<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Exploration complète API Boursières</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      padding: 20px;
    }
    input, button {
      padding: 8px;
      font-size: 16px;
    }
    .section {
      background: #fff;
      margin: 20px 0;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    h1, h2 {
      color: #333;
    }
    pre {
      background: #f0f0f0;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
    }
    canvas {
      background: #fff;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
      margin: 20px 0;
    }
    .toggle-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      margin-bottom: 10px;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>PROMETHEE {based on Yahoo Finance}</h1>
  <label for="symbol">Symbole boursier :</label>
  <input type="text" id="symbol" placeholder="Ex : AAPL">
  <button onclick="getAllStockData()">Obtenir les données</button>

  <canvas id="priceChart" width="800" height="400"></canvas>
  <canvas id="gaugeChart" width="500" height="250"></canvas>
  <div id="results"></div>

  <script>
    const yahooFinanceApiKey = 'TA_CLE_ICI';

    async function fetchYahooData(symbol) {
      const modules = ["price","summaryDetail","financialData","defaultKeyStatistics","earnings"].join(',');
      const url = `https://yfapi.net/v11/finance/quoteSummary/${symbol}?modules=${modules}`;
      const res = await fetch(url, { headers: { 'x-api-key': yahooFinanceApiKey } });
      if (!res.ok) throw new Error("Erreur lors de l'appel à Yahoo Finance API");
      const json = await res.json();
      return json.quoteSummary.result[0];
    }

    async function fetchYahooChart(symbol) {
      const url = `https://yfapi.net/v8/finance/chart/${symbol}?range=5y&interval=1mo`;
      const response = await fetch(url, {
        headers: {
          'x-api-key': yahooFinanceApiKey
        }
      });
      if (!response.ok) throw new Error('Erreur Yahoo Chart via yfapi.net');
      return await response.json();
    }

    function plotPriceChart(timestamps, prices, symbol) {
      const ctx = document.getElementById('priceChart').getContext('2d');
      if (window.priceChartInstance) window.priceChartInstance.destroy();

      window.priceChartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          labels: timestamps.map(t => new Date(t * 1000).toLocaleDateString()),
          datasets: [{
            label: `Cours de l'action ${symbol} (5 ans)` ,
            data: prices,
            borderColor: 'blue',
            backgroundColor: 'lightblue',
            fill: false,
            tension: 0.1
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: {
              title: { display: true, text: 'Date' }
            },
            y: {
              title: { display: true, text: 'Prix de clôture' }
            }
          }
        }
      });
    }

    function plotGaugeChart(potentiel) {
      const ctx = document.getElementById('gaugeChart').getContext('2d');
      if (window.gaugeChartInstance) window.gaugeChartInstance.destroy();

      const valeur = Math.min(Math.max(potentiel, -100), 100);
      const couleur = valeur >= 0 ? '#2ecc71' : '#e74c3c';

      window.gaugeChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ['Potentiel', ''],
          datasets: [{
            data: [Math.abs(valeur), 100 - Math.abs(valeur)],
            backgroundColor: [couleur, '#ddd'],
            borderWidth: 0,
            rotation: -90,
            circumference: 180,
            cutout: '70%'
          }]
        },
        options: {
          plugins: {
            tooltip: { enabled: false },
            legend: { display: false },
            datalabels: {
              display: true,
              formatter: () => `${valeur.toFixed(1)}%`,
              color: '#333',
              font: { size: 18, weight: 'bold' }
            }
          }
        },
        plugins: [ChartDataLabels]
      });
    }

    async function getAllStockData() {
      const symbol = document.getElementById('symbol').value.trim().toUpperCase();
      if (!symbol) return alert("Veuillez saisir un symbole.");

      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '<p>Chargement...</p>';

      try {
        const [chartDataRaw, yahooData] = await Promise.all([
          fetchYahooChart(symbol),
          fetchYahooData(symbol)
        ]);

        const chartData = chartDataRaw.chart.result[0];
        const timestamps = chartData.timestamp;
        const closePrices = chartData.indicators.quote[0].close;
        plotPriceChart(timestamps, closePrices, symbol);

        const prixActuel = yahooData.price?.regularMarketPrice?.raw || 0;
        const PERcurrent = yahooData.summaryDetail?.trailingPE?.raw || null;
        const PBRcurrent = yahooData.defaultKeyStatistics?.priceToBook?.raw || null;
        const PSRcurrent = yahooData.summaryDetail?.priceToSalesTrailing12Months?.raw || null;
        const PCFcurrent = yahooData.defaultKeyStatistics?.priceToCashFlow?.raw || null;

        const netIncomes = yahooData.incomeStatementHistory?.incomeStatementHistory?.map(e => e.netIncome?.raw).filter(v => typeof v === 'number') || [];
        const totalRevenue = yahooData.incomeStatementHistory?.incomeStatementHistory?.map(i => i.totalRevenue?.raw).filter(v => typeof v === 'number') || [];
        const totalCashFlow = yahooData.cashflowStatementHistory?.cashflowStatements?.map(cs => cs.totalCashFromOperatingActivities?.raw).filter(v => typeof v === 'number') || [];
        const totalBookValue = yahooData.balanceSheetHistory?.balanceSheetStatements?.map(bs => bs.totalStockholderEquity?.raw).filter(v => typeof v === 'number') || [];
        const totalMarketCap = yahooData.price?.marketCap?.raw || prixActuel * yahooData.defaultKeyStatistics?.sharesOutstanding?.raw;
        const netIncomes = yahooData.incomeStatementHistory?.incomeStatementHistory?.map(i => i.netIncome?.raw).filter(Boolean) || [];

        let PERavg = null;
        if (netIncomes.length > 0 && closePrices.length >= netIncomes.length && yahooData.defaultKeyStatistics?.sharesOutstanding?.raw) {
          let sumPER = 0, countPER = 0;
          const shares = yahooData.defaultKeyStatistics.sharesOutstanding.raw;
          for (let i = 0; i < netIncomes.length; i++) {
            const eps = netIncomes[i] / shares;
            const price = closePrices[closePrices.length - netIncomes.length + i];
            if (eps && price) {
              sumPER += price / eps;
              countPER++;
            }
          }
          PERavg = countPER ? sumPER / countPER : null;
        }
        }

        let PBRavg = null;
        if (totalBookValue.length > 0 && closePrices.length >= totalBookValue.length) {
          let sumPBR = 0, countPBR = 0;
          for (let i = 0; i < totalBookValue.length; i++) {
            const bv = totalBookValue[i];
            const price = closePrices[closePrices.length - totalBookValue.length + i];
            if (bv && yahooData.defaultKeyStatistics?.sharesOutstanding?.raw) {
              if (!yahooData.defaultKeyStatistics?.sharesOutstanding?.raw || yahooData.defaultKeyStatistics.sharesOutstanding.raw === 0) continue;
              const bvps = bv / yahooData.defaultKeyStatistics.sharesOutstanding.raw;
              sumPBR += price / bvps;
              countPBR++;
            }
          }
          PBRavg = countPBR ? sumPBR / countPBR : null;
        }

        let PSRavg = null;
        if (totalRevenue.length > 0 && yahooData.defaultKeyStatistics?.sharesOutstanding?.raw) {
          let sumPSR = 0, countPSR = 0;
          for (let i = 0; i < totalRevenue.length; i++) {
            const revenue = totalRevenue[i];
            const price = closePrices[closePrices.length - totalRevenue.length + i];
            if (!yahooData.defaultKeyStatistics?.sharesOutstanding?.raw || yahooData.defaultKeyStatistics.sharesOutstanding.raw === 0) continue;
            const revenuePerShare = revenue / yahooData.defaultKeyStatistics.sharesOutstanding.raw;
            if (revenuePerShare && price) {
              sumPSR += price / revenuePerShare;
              countPSR++;
            }
          }
          PSRavg = countPSR ? sumPSR / countPSR : null;
        }

        let PCFavg = null;
        if (totalCashFlow.length > 0 && yahooData.defaultKeyStatistics?.sharesOutstanding?.raw) {
          let sumPCF = 0, countPCF = 0;
          for (let i = 0; i < totalCashFlow.length; i++) {
            const cashflow = totalCashFlow[i];
            const price = closePrices[closePrices.length - totalCashFlow.length + i];
            if (!yahooData.defaultKeyStatistics?.sharesOutstanding?.raw || yahooData.defaultKeyStatistics.sharesOutstanding.raw === 0) continue;
            const cfpershare = cashflow / yahooData.defaultKeyStatistics.sharesOutstanding.raw;
            if (cfpershare && price) {
              sumPCF += price / cfpershare;
              countPCF++;
            }
          }
          PCFavg = countPCF ? sumPCF / countPCF : null;
        }

        const PERjusteValeur = PERcurrent ? (PERavg / PERcurrent) * prixActuel : null;
        const PBRjusteValeur = PBRcurrent ? (PBRavg / PBRcurrent) * prixActuel : null;
        const PSRjusteValeur = PSRcurrent ? (PSRavg / PSRcurrent) * prixActuel : null;
        const PCFjusteValeur = PCFcurrent ? (PCFavg / PCFcurrent) * prixActuel : null;

        const justesValeurs = [PERjusteValeur, PBRjusteValeur, PSRjusteValeur, PCFjusteValeur].filter(v => typeof v === 'number');
        const justeValeurMoyenne = justesValeurs.length ? justesValeurs.reduce((a,b) => a+b, 0) / justesValeurs.length : null;
        const potentiel = justeValeurMoyenne ? ((justeValeurMoyenne - prixActuel) / prixActuel) * 100 : 0;

        resultsDiv.innerHTML = `
          <div class="section">
            <h2>Données Fondamentales (Yahoo)</h2>
            <table>
              <tr><th>Ratio</th><th>Actuel</th><th>Moyenne (5 ans)</th></tr>
              <tr><td>PER</td><td>${PERcurrent?.toFixed(2) || 'N/A'}</td><td>${PERavg?.toFixed(2) || 'N/A'}</td></tr>
              <tr><td>PBR</td><td>${PBRcurrent?.toFixed(2) || 'N/A'}</td><td>${PBRavg?.toFixed(2) || 'N/A'}</td></tr>
              <tr><td>PSR</td><td>${PSRcurrent?.toFixed(2) || 'N/A'}</td><td>${PSRavg?.toFixed(2) || 'N/A'}</td></tr>
              <tr><td>PCF</td><td>${PCFcurrent?.toFixed(2) || 'N/A'}</td><td>${PCFavg?.toFixed(2) || 'N/A'}</td></tr>
            </table>
          </div>
          <div class="section">
            <h2>📐 Justes Valeurs estimées</h2>
            <table>
              <tr><th>Méthode</th><th>Juste Valeur</th></tr>
              <tr><td>PER</td><td>${PERjusteValeur?.toFixed(2) || 'N/A'}</td></tr>
              <tr><td>PBR</td><td>${PBRjusteValeur?.toFixed(2) || 'N/A'}</td></tr>
              <tr><td>PSR</td><td>${PSRjusteValeur?.toFixed(2) || 'N/A'}</td></tr>
              <tr><td>PCF</td><td>${PCFjusteValeur?.toFixed(2) || 'N/A'}</td></tr>
              <tr><td>Moyenne</td><td>${justeValeurMoyenne?.toFixed(2) || 'N/A'}</td></tr>
              <tr><td>Potentiel</td><td>${potentiel.toFixed(2)}%</td></tr>
            </table>
          </div>`;

        plotGaugeChart(potentiel);

      } catch (err) {
        resultsDiv.innerHTML = `<p style="color:red">Erreur : ${err.message}</p>`;
      }
    }
  </script>
</body>
</html>
