<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Analyse Boursi√®re - Recherche avanc√©e</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: Arial; background: #f4f4f4; padding: 20px; }
    input, button, select { padding: 8px; font-size: 16px; margin: 5px 0; }
    .section { background: #fff; margin: 20px 0; padding: 15px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
    pre { background: #f0f0f0; padding: 10px; border-radius: 5px; overflow-x: auto; }
    canvas { background: #fff; padding: 10px; border-radius: 8px; box-shadow: 0 0 5px rgba(0,0,0,0.1); margin: 20px 0; }
    .toggle-btn { background-color: #007bff; color: white; border: none; padding: 5px 10px; margin-bottom: 10px; border-radius: 4px; cursor: pointer; }
  </style>
</head>
<body>
  <h1>üîç PROMETHEE ‚Äî Analyse Financi√®re</h1>

  <label for="symbol">Symbole boursier :</label><br>
  <input type="text" id="symbol" placeholder="Ex : AAPL"><br>

  <label for="companyName">Ou nom de l'entreprise :</label><br>
  <input type="text" id="companyName" placeholder="Ex : Apple"><br>

  <button onclick="startLookup()">Valider</button>

  <div id="symbolSelector" style="display:none;"></div>

  <canvas id="priceChart" width="800" height="400"></canvas>
  <div id="results"></div>

  <script>
    const API_KEY = 'rttxsajf3H5LODaejekoq1EVeAOxwQG98tdRyDZb';
    let currentChart = null;

    async function safeFetchJson(url, options) {
      const res = await fetch(url, options);
      const text = await res.text();
      try {
        return JSON.parse(text);
      } catch {
        throw new Error("‚ùå R√©ponse non valide re√ßue depuis l‚ÄôAPI (probablement un message d'erreur ou indisponibilit√©).");
      }
    }

    async function startLookup() {
      const symbolInput = document.getElementById('symbol').value.trim().toUpperCase();
      const companyInput = document.getElementById('companyName').value.trim();
      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '';
      if (currentChart) currentChart.destroy();
      document.getElementById('symbolSelector').style.display = 'none';

      if (symbolInput) {
        getAllStockData(symbolInput);
        return;
      }

      if (companyInput) {
        const url = `https://yfapi.net/v6/finance/autocomplete?query=${encodeURIComponent(companyInput)}&lang=fr`;
        let data;
        try {
          data = await safeFetchJson(url, {
            headers: { 'x-api-key': API_KEY }
          });
        } catch (err) {
          resultsDiv.innerHTML = `<p style="color:red">${err.message}</p>`;
          return;
        }

        const results = data?.ResultSet?.Result;
        if (!results || results.length === 0) {
          resultsDiv.innerHTML = `<p style="color:red">‚ùå Aucun symbole trouv√© pour "${companyInput}".</p>`;
          return;
        }

        const selector = document.createElement('select');
        selector.id = "symbolChoice";
        selector.innerHTML = results.map(r =>
          `<option value="${r.symbol}">${r.symbol} - ${r.name} (${r.exchDisp})</option>`
        ).join('');

        const validateBtn = document.createElement('button');
        validateBtn.textContent = 'Choisir ce symbole';
        validateBtn.onclick = () => {
          const selected = document.getElementById('symbolChoice').value;
          document.getElementById('symbolSelector').style.display = 'none';
          getAllStockData(selected);
        };

        const container = document.getElementById('symbolSelector');
        container.innerHTML = '<h3>Plusieurs r√©sultats trouv√©s :</h3>';
        container.appendChild(selector);
        container.appendChild(document.createElement('br'));
        container.appendChild(validateBtn);
        container.style.display = 'block';
      }
    }

    async function getAllStockData(symbol) {
      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '<p>Chargement...</p>';
      const ctx = document.getElementById('priceChart').getContext('2d');
      if (currentChart) currentChart.destroy();

      try {
        const [quoteData, chartData] = await Promise.all([
          safeFetchJson(`https://yfapi.net/v11/finance/quoteSummary/${symbol}?modules=price,summaryDetail,financialData,defaultKeyStatistics,calendarEvents,earnings,quoteType`, {
            headers: { 'x-api-key': API_KEY }
          }),
          safeFetchJson(`https://yfapi.net/v8/finance/chart/${symbol}?range=5y&interval=1mo&region=US`, {
            headers: { 'x-api-key': API_KEY }
          })
        ]);

        const quote = quoteData?.quoteSummary?.result?.[0];
        const timestamps = chartData?.chart?.result?.[0]?.timestamp;
        const prices = chartData?.chart?.result?.[0]?.indicators?.adjclose?.[0]?.adjclose;

        if (!quote || !timestamps || !prices) throw new Error("‚ùå Donn√©es incompl√®tes ou indisponibles pour ce symbole.");

        const historicalPrices = timestamps.map((t, i) => ({
          date: new Date(t * 1000).toISOString().split('T')[0],
          close: prices[i]
        })).filter(p => p.close);

        resultsDiv.innerHTML = '';

        displaySection('üìä Donn√©es G√©n√©rales', {
          symbole: symbol,
          nom: quote.price?.longName || "N/A",
          exchange: quote.price?.exchangeName || "N/A"
        });

        displaySection('üìä Donn√©es Fondamentales', {
          prixActuel: quote.price?.regularMarketPrice?.raw || "N/A",
          devise: quote.price?.currency || "N/A",
          capitalisation: quote.price?.marketCap?.fmt || "N/A",
          tresorerieParAction: quote.financialData?.totalCashPerShare?.fmt || "N/A",
          chiffreAffaires: quote.financialData?.totalRevenue?.fmt || "N/A",
          valeurComptable: quote.defaultKeyStatistics?.bookValue?.fmt || "N/A"
        });

        displaySection('üìä Ratios Financiers { Actuels }', {
          PER: quote.summaryDetail?.trailingPE?.fmt || "N/A",
          PCF: quote.defaultKeyStatistics?.priceToCashFlow?.fmt || "N/A",
          PSR: quote.summaryDetail?.priceToSalesTrailing12Months?.fmt || "N/A",
          PBR: quote.defaultKeyStatistics?.priceToBook?.fmt || "N/A"
        });

        currentChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: historicalPrices.map(p => p.date),
            datasets: [{
              label: `Prix historique (${symbol})`,
              data: historicalPrices.map(p => p.close),
              borderColor: 'green',
              fill: false,
              tension: 0.1
            }]
          },
          options: {
            responsive: true,
            scales: {
              x: { title: { display: true, text: 'Date' }},
              y: { title: { display: true, text: 'Prix (USD)' }}
            }
          }
        });

        const earnings = quote.earnings?.earningsChart?.financialsChart?.yearly || [];
        const earningsValues = earnings.map(e => e.earnings?.raw);
        const chartPrices = historicalPrices.slice(-earningsValues.length).map(p => p.close);
        const perList = chartPrices.map((price, i) => earningsValues[i] ? price / earningsValues[i] : null).filter(v => v);
        const pbrList = chartPrices.map((price, i) => earningsValues[i] ? price / earningsValues[i] : null).filter(v => v);

        const perAvg = perList.length ? perList.reduce((a, b) => a + b, 0) / perList.length : null;
        const pbrAvg = pbrList.length ? pbrList.reduce((a, b) => a + b, 0) / pbrList.length : null;

        const priceCurrent = quote.price?.regularMarketPrice?.raw || null;
        const fairValues = {
          PER: (perAvg && quote.summaryDetail?.trailingPE?.raw) ? (perAvg / quote.summaryDetail.trailingPE.raw) * priceCurrent : null,
          PCF: quote.defaultKeyStatistics?.priceToCashFlow?.raw ? priceCurrent : null,
          PSR: quote.summaryDetail?.priceToSalesTrailing12Months?.raw ? priceCurrent : null,
          PBR: (pbrAvg && quote.defaultKeyStatistics?.priceToBook?.raw) ? (pbrAvg / quote.defaultKeyStatistics.priceToBook.raw) * priceCurrent : null
        };

        const fairValuesList = Object.values(fairValues).filter(v => typeof v === 'number');
        const fairAvg = fairValuesList.length ? fairValuesList.reduce((a, b) => a + b, 0) / fairValuesList.length : null;
        const upside = fairAvg && priceCurrent ? ((fairAvg / priceCurrent - 1) * 100) : null;
        const couleur = upside > 0 ? 'green' : 'red';
        const formatVal = v => (typeof v === 'number' && !isNaN(v)) ? v.toFixed(2) : 'N/A';

        displaySection('üìê Juste Valeur Estim√©e - Ratios Historiques', {
          'Juste Valeur (PER)': formatVal(fairValues.PER),
          'Juste Valeur (PCF)': formatVal(fairValues.PCF),
          'Juste Valeur (PSR)': formatVal(fairValues.PSR),
          'Juste Valeur (PBR)': formatVal(fairValues.PBR),
          'Moyenne': formatVal(fairAvg),
          'Potentiel (%)': upside !== null ? `${upside.toFixed(2)}%` : 'N/A'
        });

        const potentiel = document.createElement('div');
        potentiel.className = 'section';
        potentiel.innerHTML = `<h2 style="color:${couleur}">üìà Potentiel estim√© : ${upside?.toFixed(2) || 'N/A'}%</h2>`;
        resultsDiv.appendChild(potentiel);

      } catch (err) {
        resultsDiv.innerHTML = `<p style="color:red">${err.message}</p>`;
      }
    }

    function displaySection(title, obj) {
      const section = document.createElement('div');
      section.className = 'section';
      const h2 = document.createElement('h2');
      h2.textContent = title;

      const btn = document.createElement('button');
      btn.className = 'toggle-btn';
      btn.textContent = 'Afficher/Masquer';

      const pre = document.createElement('pre');
      pre.textContent = JSON.stringify(obj, null, 2);

      btn.onclick = () => {
        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';
      };

      section.appendChild(h2);
      section.appendChild(btn);
      section.appendChild(pre);
      document.getElementById('results').appendChild(section);
    }
  </script>
</body>
</html>
