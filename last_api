<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Exploration compl√®te API Boursi√®res</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      padding: 20px;
    }
    input, button {
      padding: 8px;
      font-size: 16px;
    }
    .section {
      background: #fff;
      margin: 20px 0;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    h1, h2 {
      color: #333;
    }
    pre {
      background: #f0f0f0;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
    }
    canvas {
      background: #fff;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
      margin: 20px 0;
    }
    .toggle-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      margin-bottom: 10px;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>Exploration compl√®te des APIs Yahoo Finance</h1>
  <label for="symbol">Symbole boursier :</label>
  <input type="text" id="symbol" placeholder="Ex : AAPL">
  <button onclick="getAllStockData()">Obtenir les donn√©es</button>

  <canvas id="priceChart" width="800" height="400"></canvas>
  <canvas id="gaugeChart" width="500" height="250"></canvas>
  <div id="results"></div>

  <script>
    const yahooFinanceApiKey = 'VOTRE_CLE_YAHOO';

    async function fetchYahooFinanceData(symbol) {
      const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1mo&range=5y`;
      const response = await fetch(url);
      if (!response.ok) throw new Error('Erreur Yahoo Chart');
      return await response.json();
    }

    async function fetchYahooFundamentals(symbol) {
      const modules = ["price","summaryDetail","financialData","defaultKeyStatistics","earnings"].join(',');
      const url = `https://yfapi.net/v11/finance/quoteSummary/${symbol}?modules=${modules}`;
      const response = await fetch(url, {
        headers: { 'x-api-key': yahooFinanceApiKey }
      });
      if (!response.ok) throw new Error('Erreur Yahoo Fundamentals');
      const json = await response.json();
      return json.quoteSummary.result[0];
    }

    function displaySection(title, dataObj) {
      const section = document.createElement('div');
      section.className = 'section';
      const h2 = document.createElement('h2');
      h2.textContent = title;
      const toggleBtn = document.createElement('button');
      toggleBtn.textContent = 'Afficher/Masquer';
      toggleBtn.className = 'toggle-btn';
      const pre = document.createElement('pre');
      pre.textContent = JSON.stringify(dataObj, null, 2);
      toggleBtn.onclick = () => {
        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';
      };
      section.appendChild(h2);
      section.appendChild(toggleBtn);
      section.appendChild(pre);
      document.getElementById('results').appendChild(section);
    }

    function plotGaugeChart(potential) {
      const ctx = document.getElementById('gaugeChart').getContext('2d');
      if (window.gaugeChartInstance) window.gaugeChartInstance.destroy();

      const value = Math.min(Math.max(potential, -100), 100);
      const color = value >= 0 ? '#2ecc71' : '#e74c3c';

      window.gaugeChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ['Potentiel', ''],
          datasets: [{
            data: [Math.abs(value), 100 - Math.abs(value)],
            backgroundColor: [color, '#ddd'],
            borderWidth: 0,
            rotation: -90,
            circumference: 180,
            cutout: '70%'
          }]
        },
        options: {
          plugins: {
            tooltip: { enabled: false },
            legend: { display: false },
            datalabels: {
              display: true,
              formatter: () => `${value.toFixed(1)}%`,
              color: '#333',
              font: { size: 18, weight: 'bold' }
            }
          }
        },
        plugins: [ChartDataLabels]
      });
    }

    function plotPriceChart(timestamps, prices) {
      const ctx = document.getElementById('priceChart').getContext('2d');
      if (window.priceChartInstance) window.priceChartInstance.destroy();
      window.priceChartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          labels: timestamps.map(ts => new Date(ts * 1000).toLocaleDateString()),
          datasets: [{
            label: 'Cours historique (Yahoo)',
            data: prices,
            borderColor: 'blue',
            fill: false,
            tension: 0.3
          }]
        }
      });
    }

    async function getAllStockData() {
      const symbol = document.getElementById('symbol').value.trim().toUpperCase();
      if (!symbol) return alert("Veuillez saisir un symbole.");

      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '<p>Chargement...</p>';

      try {
        const [yahooChart, yahoo] = await Promise.all([
          fetchYahooFinanceData(symbol),
          fetchYahooFundamentals(symbol)
        ]);

        const quote = yahoo;
        const chart = yahooChart.chart.result[0];
        const timestamps = chart.timestamp;
        const prices = chart.indicators.quote[0].close;

        plotPriceChart(timestamps, prices);

        const prixActuel = quote.price?.regularMarketPrice?.raw || null;
        const earnings = quote.earnings?.earningsChart?.financialsChart?.yearly || [];

        const prixParAnnee = prices.slice(-earnings.length);
        const epsParAnnee = earnings.map(e => e.earnings?.raw);

        const perList = prixParAnnee.map((prix, i) => {
          const eps = epsParAnnee[i];
          return eps ? prix / eps : null;
        }).filter(v => v);

        const perMoyenne5ans = perList.length ? perList.reduce((a, b) => a + b, 0) / perList.length : null;
        const perActuel = quote.summaryDetail?.trailingPE?.raw || null;

        const fairValuePER = (perMoyenne5ans && perActuel && prixActuel) ? (perMoyenne5ans / perActuel) * prixActuel : null;

        const pcfActuel = quote.defaultKeyStatistics?.priceToCashFlow?.raw || null;
        const psrActuel = quote.summaryDetail?.priceToSalesTrailing12Months?.raw || null;
        const pbrActuel = quote.defaultKeyStatistics?.priceToBook?.raw || null;

        const pcfMoy = 15;
        const psrMoy = 6;
        const pbrMoy = 3;

        const fairValuePCF = (pcfMoy && pcfActuel) ? (pcfMoy / pcfActuel) * prixActuel : null;
        const fairValuePSR = (psrMoy && psrActuel) ? (psrMoy / psrActuel) * prixActuel : null;
        const fairValuePBR = (pbrMoy && pbrActuel) ? (pbrMoy / pbrActuel) * prixActuel : null;

        const justes = [fairValuePER, fairValuePCF, fairValuePSR, fairValuePBR].filter(v => typeof v === 'number');
        const fairValueMoy = justes.length ? justes.reduce((a, b) => a + b, 0) / justes.length : null;

        const potentiel = (fairValueMoy && prixActuel) ? ((fairValueMoy - prixActuel) / prixActuel) * 100 : 0;

        displaySection('üìä Donn√©es G√©n√©rales - Yahoo', {
          nom: quote.price?.longName,
          symbole: symbol,
          exchange: quote.price?.exchangeName,
          devise: quote.price?.currency,
          prixActuel: prixActuel
        });

        displaySection('üìê Calcul de la Juste Valeur', {
          'Juste Valeur (PER)': fairValuePER?.toFixed(2),
          'Juste Valeur (PCF)': fairValuePCF?.toFixed(2),
          'Juste Valeur (PSR)': fairValuePSR?.toFixed(2),
          'Juste Valeur (PBR)': fairValuePBR?.toFixed(2),
          'Moyenne Juste Valeur': fairValueMoy?.toFixed(2),
          'Potentiel (%)': potentiel?.toFixed(2)
        });

        plotGaugeChart(potentiel);
      } catch (error) {
        resultsDiv.innerHTML = '<p style="color:red">Erreur : ' + error.message + '</p>';
      }
    }
  </script>
</body>
</html>
