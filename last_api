<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Exploration compl√®te API Boursi√®res</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      padding: 20px;
    }
    input, button {
      padding: 8px;
      font-size: 16px;
    }
    .section {
      background: #fff;
      margin: 20px 0;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    h1, h2 {
      color: #333;
    }
    pre {
      background: #f0f0f0;
      padding: 10px;
      border-radius: 5px;
      overflow-x: auto;
    }
    canvas {
      background: #fff;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
      margin: 20px 0;
    }
    .toggle-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      margin-bottom: 10px;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>PROMETHEE {based on Yahoo Finance}</h1>
  <label for="symbol">Symbole boursier :</label>
  <input type="text" id="symbol" placeholder="Ex : AAPL">
  <button onclick="getAllStockData()">Obtenir les donn√©es</button>

  <canvas id="priceChart" width="800" height="400"></canvas>
  <canvas id="gaugeChart" width="500" height="250"></canvas>
  <div id="results"></div>

  <script>
    const rapidApiKey = 'TA_CLE_RAPIDAPI_ICI';
    const rapidApiHost = 'apidojo-yahoo-finance-v1.p.rapidapi.com';

    async function fetchYahooData(symbol) {
      const url = `https://${rapidApiHost}/stock/v2/get-financials?symbol=${symbol}`;
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'X-RapidAPI-Key': rapidApiKey,
          'X-RapidAPI-Host': rapidApiHost
        }
      });
      if (!response.ok) throw new Error('Erreur RapidAPI Yahoo Finance - financials');
      const json = await response.json();
      return json;
    }

    async function fetchYahooChart(symbol) {
      const url = `https://${rapidApiHost}/stock/v3/get-chart?symbol=${symbol}&interval=1mo&range=5y&region=US`;
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'X-RapidAPI-Key': rapidApiKey,
          'X-RapidAPI-Host': rapidApiHost
        }
      });
      if (!response.ok) throw new Error('Erreur Yahoo Chart via RapidAPI');
      return await response.json();
    }

    // === Affichage graphique ===
function plotPriceChart(timestamps, prices, symbol) {
  const ctx = document.getElementById('priceChart').getContext('2d');
  if (window.priceChartInstance) window.priceChartInstance.destroy();

  window.priceChartInstance = new Chart(ctx, {
    type: 'line',
    data: {
      labels: timestamps.map(t => new Date(t * 1000).toLocaleDateString()),
      datasets: [{
        label: `Cours de l'action ${symbol} (5 ans)` ,
        data: prices,
        borderColor: 'blue',
        backgroundColor: 'lightblue',
        fill: false,
        tension: 0.1
      }]
    },
    options: {
      responsive: true,
      scales: {
        x: { title: { display: true, text: 'Date' } },
        y: { title: { display: true, text: 'Prix de cl√¥ture' } }
      }
    }
  });
}

function plotGaugeChart(potential) {
  const ctx = document.getElementById('gaugeChart').getContext('2d');
  if (window.gaugeChartInstance) window.gaugeChartInstance.destroy();

  const value = Math.min(Math.max(potential, -100), 100);
  const color = value >= 0 ? '#2ecc71' : '#e74c3c';

  window.gaugeChartInstance = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['Potentiel', ''],
      datasets: [{
        data: [Math.abs(value), 100 - Math.abs(value)],
        backgroundColor: [color, '#ddd'],
        borderWidth: 0,
        rotation: -90,
        circumference: 180,
        cutout: '70%'
      }]
    },
    options: {
      plugins: {
        tooltip: { enabled: false },
        legend: { display: false },
        datalabels: {
          display: true,
          formatter: () => `${value.toFixed(1)}%`,
          color: '#333',
          font: { size: 18, weight: 'bold' }
        }
      }
    },
    plugins: [ChartDataLabels]
  });
}

function displaySection(title, dataObj) {
  const section = document.createElement('div');
  section.className = 'section';
  const h2 = document.createElement('h2');
  h2.textContent = title;
  const toggleBtn = document.createElement('button');
  toggleBtn.textContent = 'Afficher/Masquer';
  toggleBtn.className = 'toggle-btn';
  const pre = document.createElement('pre');
  pre.textContent = JSON.stringify(dataObj, null, 2);
  toggleBtn.onclick = () => {
    pre.style.display = pre.style.display === 'none' ? 'block' : 'none';
  };
  section.appendChild(h2);
  section.appendChild(toggleBtn);
  section.appendChild(pre);
  document.getElementById('results').appendChild(section);
}

async function getAllStockData() {
  const symbol = document.getElementById('symbol').value.trim().toUpperCase();
  if (!symbol) return alert("Veuillez saisir un symbole.");

  const resultsDiv = document.getElementById('results');
  resultsDiv.innerHTML = '<p>Chargement...</p>';

  try {
    const [financials, chartData] = await Promise.all([
      fetchYahooData(symbol),
      fetchYahooChart(symbol)
    ]);

    const chart = chartData.chart.result[0];
    const timestamps = chart.timestamp;
    const closePrices = chart.indicators.quote[0].close;
    const prixActuel = closePrices[closePrices.length - 1];
    plotPriceChart(timestamps, closePrices, symbol);

    // Simuler les √©tats financiers pour tests
    const shares = 15022100480;
    const netIncomes = [100e9, 110e9, 98e9, 102e9, 105e9];
    const totalRevenue = [400e9, 420e9, 430e9, 415e9, 440e9];
    const totalCashFlow = [80e9, 85e9, 90e9, 87e9, 92e9];
    const totalBookValue = [65e9, 67e9, 69e9, 70e9, 72e9];

    const PERavg = netIncomes.length ? closePrices.slice(-5).reduce((acc, price, i) => acc + (price / (netIncomes[i] / shares)), 0) / netIncomes.length : null;
    const PBRavg = totalBookValue.length ? closePrices.slice(-5).reduce((acc, price, i) => acc + (price / (totalBookValue[i] / shares)), 0) / totalBookValue.length : null;
    const PSRavg = totalRevenue.length ? closePrices.slice(-5).reduce((acc, price, i) => acc + (price / (totalRevenue[i] / shares)), 0) / totalRevenue.length : null;
    const PCFavg = totalCashFlow.length ? closePrices.slice(-5).reduce((acc, price, i) => acc + (price / (totalCashFlow[i] / shares)), 0) / totalCashFlow.length : null;

    const PERcurrent = PERavg; // pour test
    const PBRcurrent = PBRavg;
    const PSRcurrent = PSRavg;
    const PCFcurrent = PCFavg;

    const PERjusteValeur = (PERavg && PERcurrent) ? (PERavg / PERcurrent) * prixActuel : null;
    const PBRjusteValeur = (PBRavg && PBRcurrent) ? (PBRavg / PBRcurrent) * prixActuel : null;
    const PSRjusteValeur = (PSRavg && PSRcurrent) ? (PSRavg / PSRcurrent) * prixActuel : null;
    const PCFjusteValeur = (PCFavg && PCFcurrent) ? (PCFavg / PCFcurrent) * prixActuel : null;

    const fairValues = [PERjusteValeur, PBRjusteValeur, PSRjusteValeur, PCFjusteValeur].filter(v => typeof v === 'number');
    const moyenneJusteValeur = fairValues.length ? fairValues.reduce((a, b) => a + b, 0) / fairValues.length : null;
    const potentiel = moyenneJusteValeur && prixActuel ? ((moyenneJusteValeur - prixActuel) / prixActuel) * 100 : null;

    displaySection('üìä Ratios calcul√©s', {
      PERavg, PBRavg, PSRavg, PCFavg,
      PERcurrent, PBRcurrent, PSRcurrent, PCFcurrent
    });

    displaySection('üìê Justes valeurs estim√©es', {
      'Juste valeur (PER)': PERjusteValeur?.toFixed(2),
      'Juste valeur (PBR)': PBRjusteValeur?.toFixed(2),
      'Juste valeur (PSR)': PSRjusteValeur?.toFixed(2),
      'Juste valeur (PCF)': PCFjusteValeur?.toFixed(2),
      'Moyenne': moyenneJusteValeur?.toFixed(2),
      'Potentiel (%)': potentiel?.toFixed(2)
    });

    plotGaugeChart(potentiel);
  } catch (error) {
    resultsDiv.innerHTML = '<p style="color:red">Erreur : ' + error.message + '</p>';
  }
}
  </script>
</body>
</html>
