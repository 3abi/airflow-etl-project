from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import httpx
import psycopg2
import os
import re
from fastapi.staticfiles import StaticFiles

app = FastAPI()

# CORS
origins = ["*"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Data model
class Query(BaseModel):
    prompt: str

@app.post("/query")
async def query_data(data: Query):
    # Appel au modèle phi3 via le conteneur ollama
    async with httpx.AsyncClient() as client:
        res = await client.post(
            "http://ollama:11434/api/generate",
            json={
                "model": "phi3:mini",
                "prompt": f"Convertis cette demande en SQL: {data.prompt}",
                "stream": False
            },
            timeout=60
        )
        result = res.json()
        full_response = result.get("response", "").strip()

    # Extraire la requête SQL entre balises ```sql ... ```
    sql_matches = re.findall(r"```sql\s*(.*?)\s*```", full_response, re.DOTALL | re.IGNORECASE)
    if not sql_matches:
        return {"response": full_response, "error": "Aucune requête SQL valide trouvée dans la réponse."}

    sql_query = sql_matches[0].strip()

    # Connexion à PostgreSQL
    try:
        conn = psycopg2.connect(
            host=os.getenv("POSTGRES_HOST", "postgres"),
            port=os.getenv("POSTGRES_PORT", 5432),
            database=os.getenv("POSTGRES_DB", "demo"),
            user=os.getenv("POSTGRES_USER", "demo"),
            password=os.getenv("POSTGRES_PASSWORD", "demo")
        )
        cur = conn.cursor()
        cur.execute(sql_query)
        rows = cur.fetchall()
        columns = [desc[0] for desc in cur.description]
        cur.close()
        conn.close()

        return {
            "query": sql_query,
            "result": [dict(zip(columns, row)) for row in rows],
            "response": full_response
        }
    except Exception as e:
        return {
            "query": sql_query,
            "error": str(e),
            "response": full_response
        }

# Serve static frontend
app.mount("/", StaticFiles(directory="static", html=True), name="static")
